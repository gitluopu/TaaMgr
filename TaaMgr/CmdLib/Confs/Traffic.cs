using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CmdLib.Confs
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using Traffic;
    //
    //    var cTraffic = CTraffic.FromJson(jsonString);

    namespace Traffic
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class CTraffic
        {
            [JsonProperty("interface")]
            public string Interface { get; set; }

            [JsonProperty("taaId")]
            public string TaaId { get; set; }

            [JsonProperty("pps")]
            public long Pps { get; set; }

            [JsonProperty("bps")]
            public long Bps { get; set; }

            [JsonProperty("timestamp")]
            public long Timestamp { get; set; }
        }

        public partial class CTraffic
        {
            public static CTraffic[] FromJson(string json) => JsonConvert.DeserializeObject<CTraffic[]>(json, Traffic.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this CTraffic[] self) => JsonConvert.SerializeObject(self, Traffic.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }

}
