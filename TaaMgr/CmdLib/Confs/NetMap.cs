using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace CmdLib.Confs
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using NetworkAnalysis;
    //
    //    var cNetworkAnalysis = CNetworkAnalysis.FromJson(jsonString);

    namespace NetMap
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class CNetMap
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("srcIp")]
            public string SrcIp { get; set; }

            [JsonProperty("srcPort")]
            public string SrcPort { get; set; }

            [JsonProperty("srcMac")]
            public string SrcMac { get; set; }

            [JsonProperty("srcUnitId")]
            public string SrcUnitId { get; set; }

            [JsonProperty("srcVendor")]
            public string SrcVendor { get; set; }

            [JsonProperty("dstIp")]
            public string DstIp { get; set; }

            [JsonProperty("dstPort")]
            public string DstPort { get; set; }

            [JsonProperty("dstMac")]
            public string DstMac { get; set; }

            [JsonProperty("dstUnitId")]
            public string DstUnitId { get; set; }

            [JsonProperty("dstVendor")]
            public string DstVendor { get; set; }

            [JsonProperty("traType")]
            public string TraType { get; set; }

            [JsonProperty("appType")]
            public string AppType { get; set; }

            [JsonProperty("fseen")]
            public long Fseen { get; set; }

            [JsonProperty("lseen")]
            public long Lseen { get; set; }

            [JsonProperty("taaId")]
            public string TaaId { get; set; }

            [JsonProperty("packets")]
            public long Packets { get; set; }

            [JsonProperty("bytes")]
            public long Bytes { get; set; }
        }

        public partial class CNetMap
        {
            public static CNetMap[] FromJson(string json) => JsonConvert.DeserializeObject<CNetMap[]>(json, NetMap.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this CNetMap[] self) => JsonConvert.SerializeObject(self, NetMap.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Formatting = Formatting.Indented,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }



}
