using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CmdLib.Confs
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using NetworkAnalysis;
    //
    //    var cNetworkAnalysis = CNetworkAnalysis.FromJson(jsonString);

    namespace NetworkAnalysis
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class CNetworkAnalysis
        {
            [JsonProperty("dllname")]
            public string Dllname { get; set; }

            [JsonProperty("classname")]
            public string Classname { get; set; }

            [JsonProperty("depends")]
            public string[] Depends { get; set; }

            [JsonProperty("config")]
            public Config Config { get; set; }
        }

        public partial class Config
        {
            [JsonProperty("socket_request_max_bytes")]
            public long SocketRequestMaxBytes { get; set; }

            [JsonProperty("pushinterval")]
            public long Pushinterval { get; set; }

            [JsonProperty("resetnetworkinterval")]
            public long Resetnetworkinterval { get; set; }
        }

        public partial class CNetworkAnalysis
        {
            public static CNetworkAnalysis FromJson(string json) => JsonConvert.DeserializeObject<CNetworkAnalysis>(json, NetworkAnalysis.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this CNetworkAnalysis self) => JsonConvert.SerializeObject(self, NetworkAnalysis.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Formatting = Formatting.Indented,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }

}
